// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparcraft.proto

#ifndef PROTOBUF_sparcraft_2eproto__INCLUDED
#define PROTOBUF_sparcraft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace sparcraft {
class Army;
class ArmyDefaultTypeInternal;
extern ArmyDefaultTypeInternal _Army_default_instance_;
class features;
class featuresDefaultTypeInternal;
extern featuresDefaultTypeInternal _features_default_instance_;
}  // namespace sparcraft

namespace sparcraft {

namespace protobuf_sparcraft_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sparcraft_2eproto

// ===================================================================

class features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sparcraft.features) */ {
 public:
  features();
  virtual ~features();

  features(const features& from);

  inline features& operator=(const features& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const features& default_instance();

  static inline const features* internal_default_instance() {
    return reinterpret_cast<const features*>(
               &_features_default_instance_);
  }

  void Swap(features* other);

  // implements Message ----------------------------------------------

  inline features* New() const PROTOBUF_FINAL { return New(NULL); }

  features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const features& from);
  void MergeFrom(const features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 hp = 2;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // int32 posx = 3;
  void clear_posx();
  static const int kPosxFieldNumber = 3;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // int32 posy = 4;
  void clear_posy();
  static const int kPosyFieldNumber = 4;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // int32 energy = 5;
  void clear_energy();
  static const int kEnergyFieldNumber = 5;
  ::google::protobuf::int32 energy() const;
  void set_energy(::google::protobuf::int32 value);

  // int32 shields = 6;
  void clear_shields();
  static const int kShieldsFieldNumber = 6;
  ::google::protobuf::int32 shields() const;
  void set_shields(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sparcraft.features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 shields_;
  mutable int _cached_size_;
  friend struct protobuf_sparcraft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Army : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sparcraft.Army) */ {
 public:
  Army();
  virtual ~Army();

  Army(const Army& from);

  inline Army& operator=(const Army& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Army& default_instance();

  static inline const Army* internal_default_instance() {
    return reinterpret_cast<const Army*>(
               &_Army_default_instance_);
  }

  void Swap(Army* other);

  // implements Message ----------------------------------------------

  inline Army* New() const PROTOBUF_FINAL { return New(NULL); }

  Army* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Army& from);
  void MergeFrom(const Army& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Army* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sparcraft.features unit = 50;
  int unit_size() const;
  void clear_unit();
  static const int kUnitFieldNumber = 50;
  const ::sparcraft::features& unit(int index) const;
  ::sparcraft::features* mutable_unit(int index);
  ::sparcraft::features* add_unit();
  ::google::protobuf::RepeatedPtrField< ::sparcraft::features >*
      mutable_unit();
  const ::google::protobuf::RepeatedPtrField< ::sparcraft::features >&
      unit() const;

  // @@protoc_insertion_point(class_scope:sparcraft.Army)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sparcraft::features > unit_;
  mutable int _cached_size_;
  friend struct protobuf_sparcraft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// features

// int32 id = 1;
inline void features::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 features::id() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.id)
  return id_;
}
inline void features::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.id)
}

// int32 hp = 2;
inline void features::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 features::hp() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.hp)
  return hp_;
}
inline void features::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.hp)
}

// int32 posx = 3;
inline void features::clear_posx() {
  posx_ = 0;
}
inline ::google::protobuf::int32 features::posx() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.posx)
  return posx_;
}
inline void features::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.posx)
}

// int32 posy = 4;
inline void features::clear_posy() {
  posy_ = 0;
}
inline ::google::protobuf::int32 features::posy() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.posy)
  return posy_;
}
inline void features::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.posy)
}

// int32 energy = 5;
inline void features::clear_energy() {
  energy_ = 0;
}
inline ::google::protobuf::int32 features::energy() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.energy)
  return energy_;
}
inline void features::set_energy(::google::protobuf::int32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.energy)
}

// int32 shields = 6;
inline void features::clear_shields() {
  shields_ = 0;
}
inline ::google::protobuf::int32 features::shields() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.shields)
  return shields_;
}
inline void features::set_shields(::google::protobuf::int32 value) {
  
  shields_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.shields)
}

// -------------------------------------------------------------------

// Army

// repeated .sparcraft.features unit = 50;
inline int Army::unit_size() const {
  return unit_.size();
}
inline void Army::clear_unit() {
  unit_.Clear();
}
inline const ::sparcraft::features& Army::unit(int index) const {
  // @@protoc_insertion_point(field_get:sparcraft.Army.unit)
  return unit_.Get(index);
}
inline ::sparcraft::features* Army::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:sparcraft.Army.unit)
  return unit_.Mutable(index);
}
inline ::sparcraft::features* Army::add_unit() {
  // @@protoc_insertion_point(field_add:sparcraft.Army.unit)
  return unit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sparcraft::features >*
Army::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:sparcraft.Army.unit)
  return &unit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sparcraft::features >&
Army::unit() const {
  // @@protoc_insertion_point(field_list:sparcraft.Army.unit)
  return unit_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sparcraft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sparcraft_2eproto__INCLUDED
