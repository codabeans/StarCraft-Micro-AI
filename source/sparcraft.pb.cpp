// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparcraft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/sparcraft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sparcraft {
class featuresDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<features> {
} _features_default_instance_;
class ArmyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Army> {
} _Army_default_instance_;

namespace protobuf_sparcraft_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, posx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, posy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(features, shields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, unit_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(features)},
  { 10, -1, sizeof(Army)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Army_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sparcraft.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _features_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Army_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _features_default_instance_.DefaultConstruct();
  _Army_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017sparcraft.proto\022\tsparcraft\"_\n\010features"
      "\022\n\n\002id\030\001 \001(\005\022\n\n\002hp\030\002 \001(\005\022\014\n\004posx\030\003 \001(\005\022\014"
      "\n\004posy\030\004 \001(\005\022\016\n\006energy\030\005 \001(\005\022\017\n\007shields\030"
      "\006 \001(\005\")\n\004Army\022!\n\004unit\0302 \003(\0132\023.sparcraft."
      "featuresb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sparcraft.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sparcraft_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int features::kIdFieldNumber;
const int features::kHpFieldNumber;
const int features::kPosxFieldNumber;
const int features::kPosyFieldNumber;
const int features::kEnergyFieldNumber;
const int features::kShieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

features::features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sparcraft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sparcraft.features)
}
features::features(const features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&shields_) -
    reinterpret_cast<char*>(&id_) + sizeof(shields_));
  // @@protoc_insertion_point(copy_constructor:sparcraft.features)
}

void features::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&shields_) -
    reinterpret_cast<char*>(&id_) + sizeof(shields_));
  _cached_size_ = 0;
}

features::~features() {
  // @@protoc_insertion_point(destructor:sparcraft.features)
  SharedDtor();
}

void features::SharedDtor() {
}

void features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* features::descriptor() {
  protobuf_sparcraft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sparcraft_2eproto::file_level_metadata[0].descriptor;
}

const features& features::default_instance() {
  protobuf_sparcraft_2eproto::InitDefaults();
  return *internal_default_instance();
}

features* features::New(::google::protobuf::Arena* arena) const {
  features* n = new features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void features::Clear() {
// @@protoc_insertion_point(message_clear_start:sparcraft.features)
  ::memset(&id_, 0, reinterpret_cast<char*>(&shields_) -
    reinterpret_cast<char*>(&id_) + sizeof(shields_));
}

bool features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sparcraft.features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 posx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 posy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 energy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shields = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sparcraft.features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sparcraft.features)
  return false;
#undef DO_
}

void features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sparcraft.features)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // int32 posx = 3;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // int32 posy = 4;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // int32 energy = 5;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }

  // int32 shields = 6;
  if (this->shields() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shields(), output);
  }

  // @@protoc_insertion_point(serialize_end:sparcraft.features)
}

::google::protobuf::uint8* features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sparcraft.features)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // int32 posx = 3;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // int32 posy = 4;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // int32 energy = 5;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }

  // int32 shields = 6;
  if (this->shields() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shields(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sparcraft.features)
  return target;
}

size_t features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sparcraft.features)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // int32 posx = 3;
  if (this->posx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posx());
  }

  // int32 posy = 4;
  if (this->posy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posy());
  }

  // int32 energy = 5;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy());
  }

  // int32 shields = 6;
  if (this->shields() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shields());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sparcraft.features)
  GOOGLE_DCHECK_NE(&from, this);
  const features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sparcraft.features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sparcraft.features)
    MergeFrom(*source);
  }
}

void features::MergeFrom(const features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sparcraft.features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.shields() != 0) {
    set_shields(from.shields());
  }
}

void features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sparcraft.features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void features::CopyFrom(const features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sparcraft.features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool features::IsInitialized() const {
  return true;
}

void features::Swap(features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void features::InternalSwap(features* other) {
  std::swap(id_, other->id_);
  std::swap(hp_, other->hp_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(energy_, other->energy_);
  std::swap(shields_, other->shields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata features::GetMetadata() const {
  protobuf_sparcraft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sparcraft_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// features

// int32 id = 1;
void features::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 features::id() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.id)
  return id_;
}
void features::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.id)
}

// int32 hp = 2;
void features::clear_hp() {
  hp_ = 0;
}
::google::protobuf::int32 features::hp() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.hp)
  return hp_;
}
void features::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.hp)
}

// int32 posx = 3;
void features::clear_posx() {
  posx_ = 0;
}
::google::protobuf::int32 features::posx() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.posx)
  return posx_;
}
void features::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.posx)
}

// int32 posy = 4;
void features::clear_posy() {
  posy_ = 0;
}
::google::protobuf::int32 features::posy() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.posy)
  return posy_;
}
void features::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.posy)
}

// int32 energy = 5;
void features::clear_energy() {
  energy_ = 0;
}
::google::protobuf::int32 features::energy() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.energy)
  return energy_;
}
void features::set_energy(::google::protobuf::int32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.energy)
}

// int32 shields = 6;
void features::clear_shields() {
  shields_ = 0;
}
::google::protobuf::int32 features::shields() const {
  // @@protoc_insertion_point(field_get:sparcraft.features.shields)
  return shields_;
}
void features::set_shields(::google::protobuf::int32 value) {
  
  shields_ = value;
  // @@protoc_insertion_point(field_set:sparcraft.features.shields)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Army::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Army::Army()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sparcraft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sparcraft.Army)
}
Army::Army(const Army& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unit_(from.unit_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sparcraft.Army)
}

void Army::SharedCtor() {
  _cached_size_ = 0;
}

Army::~Army() {
  // @@protoc_insertion_point(destructor:sparcraft.Army)
  SharedDtor();
}

void Army::SharedDtor() {
}

void Army::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Army::descriptor() {
  protobuf_sparcraft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sparcraft_2eproto::file_level_metadata[1].descriptor;
}

const Army& Army::default_instance() {
  protobuf_sparcraft_2eproto::InitDefaults();
  return *internal_default_instance();
}

Army* Army::New(::google::protobuf::Arena* arena) const {
  Army* n = new Army;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Army::Clear() {
// @@protoc_insertion_point(message_clear_start:sparcraft.Army)
  unit_.Clear();
}

bool Army::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sparcraft.Army)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sparcraft.features unit = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unit()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sparcraft.Army)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sparcraft.Army)
  return false;
#undef DO_
}

void Army::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sparcraft.Army)
  // repeated .sparcraft.features unit = 50;
  for (unsigned int i = 0, n = this->unit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->unit(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sparcraft.Army)
}

::google::protobuf::uint8* Army::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sparcraft.Army)
  // repeated .sparcraft.features unit = 50;
  for (unsigned int i = 0, n = this->unit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, this->unit(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sparcraft.Army)
  return target;
}

size_t Army::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sparcraft.Army)
  size_t total_size = 0;

  // repeated .sparcraft.features unit = 50;
  {
    unsigned int count = this->unit_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Army::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sparcraft.Army)
  GOOGLE_DCHECK_NE(&from, this);
  const Army* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Army>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sparcraft.Army)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sparcraft.Army)
    MergeFrom(*source);
  }
}

void Army::MergeFrom(const Army& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sparcraft.Army)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_.MergeFrom(from.unit_);
}

void Army::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sparcraft.Army)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Army::CopyFrom(const Army& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sparcraft.Army)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Army::IsInitialized() const {
  return true;
}

void Army::Swap(Army* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Army::InternalSwap(Army* other) {
  unit_.UnsafeArenaSwap(&other->unit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Army::GetMetadata() const {
  protobuf_sparcraft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sparcraft_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Army

// repeated .sparcraft.features unit = 50;
int Army::unit_size() const {
  return unit_.size();
}
void Army::clear_unit() {
  unit_.Clear();
}
const ::sparcraft::features& Army::unit(int index) const {
  // @@protoc_insertion_point(field_get:sparcraft.Army.unit)
  return unit_.Get(index);
}
::sparcraft::features* Army::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:sparcraft.Army.unit)
  return unit_.Mutable(index);
}
::sparcraft::features* Army::add_unit() {
  // @@protoc_insertion_point(field_add:sparcraft.Army.unit)
  return unit_.Add();
}
::google::protobuf::RepeatedPtrField< ::sparcraft::features >*
Army::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:sparcraft.Army.unit)
  return &unit_;
}
const ::google::protobuf::RepeatedPtrField< ::sparcraft::features >&
Army::unit() const {
  // @@protoc_insertion_point(field_list:sparcraft.Army.unit)
  return unit_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sparcraft

// @@protoc_insertion_point(global_scope)
